// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorkScheduleMaker.Data;

#nullable disable

namespace WorkScheduleMaker.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211115143920_AddSchedule4")]
    partial class AddSchedule4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("IdentityRole");

                    b.HasData(
                        new
                        {
                            Id = "f988951d-de21-429c-a5a2-c01dd24c5700",
                            ConcurrencyStamp = "5f032905-a47f-4c31-b95e-29ea9ec339d2",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "c8d188b4-8237-40f8-b4c2-6dc495069241",
                            ConcurrencyStamp = "cf5f77c0-5373-47b2-aab2-8303d987d574",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("IdentityUserRole<string>");
                });

            modelBuilder.Entity("WorkScheduleMaker.Entities.Day", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsHolidayOrWeekend")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MonhtlyScheduleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MonhtlyScheduleId");

                    b.ToTable("Days");
                });

            modelBuilder.Entity("WorkScheduleMaker.Entities.Forenoonschedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DayId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DayId");

                    b.HasIndex("UserId");

                    b.ToTable("ForenoonSchedules");
                });

            modelBuilder.Entity("WorkScheduleMaker.Entities.HolidaySchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DayId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DayId");

                    b.HasIndex("UserId");

                    b.ToTable("HolidaySchedules");
                });

            modelBuilder.Entity("WorkScheduleMaker.Entities.MonhtlySchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Month")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("WorkScheduleMaker.Entities.MorningSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DayId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DayId");

                    b.HasIndex("UserId");

                    b.ToTable("MorningSchedules");
                });

            modelBuilder.Entity("WorkScheduleMaker.Entities.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("WorkScheduleMaker.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WorkScheduleMaker.Entities.Day", b =>
                {
                    b.HasOne("WorkScheduleMaker.Entities.MonhtlySchedule", null)
                        .WithMany("Days")
                        .HasForeignKey("MonhtlyScheduleId");
                });

            modelBuilder.Entity("WorkScheduleMaker.Entities.Forenoonschedule", b =>
                {
                    b.HasOne("WorkScheduleMaker.Entities.Day", "Day")
                        .WithMany("UsersScheduledForForenoon")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkScheduleMaker.Entities.User", "User")
                        .WithMany("ForenoonSchedules")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkScheduleMaker.Entities.HolidaySchedule", b =>
                {
                    b.HasOne("WorkScheduleMaker.Entities.Day", "Day")
                        .WithMany("UsersOnHoliday")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkScheduleMaker.Entities.User", "User")
                        .WithMany("HolidaySchedules")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkScheduleMaker.Entities.MorningSchedule", b =>
                {
                    b.HasOne("WorkScheduleMaker.Entities.Day", "Day")
                        .WithMany("UsersScheduledForMorning")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkScheduleMaker.Entities.User", "User")
                        .WithMany("MorningSchedules")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkScheduleMaker.Entities.Request", b =>
                {
                    b.HasOne("WorkScheduleMaker.Entities.User", "User")
                        .WithMany("Requests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkScheduleMaker.Entities.Day", b =>
                {
                    b.Navigation("UsersOnHoliday");

                    b.Navigation("UsersScheduledForForenoon");

                    b.Navigation("UsersScheduledForMorning");
                });

            modelBuilder.Entity("WorkScheduleMaker.Entities.MonhtlySchedule", b =>
                {
                    b.Navigation("Days");
                });

            modelBuilder.Entity("WorkScheduleMaker.Entities.User", b =>
                {
                    b.Navigation("ForenoonSchedules");

                    b.Navigation("HolidaySchedules");

                    b.Navigation("MorningSchedules");

                    b.Navigation("Requests");
                });
#pragma warning restore 612, 618
        }
    }
}
